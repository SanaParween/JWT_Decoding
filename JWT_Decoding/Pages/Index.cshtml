@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var claims = (List<System.Security.Claims.Claim>)ViewData["claims"];
    var headerKey = (List<string>)ViewData["headerKey"];
    var headerValue = (List<string>)ViewData["headerValue"];
}
<style>
    body {
        font-family: Arial;
    }

    .header {
        color: red;
        line-height: 28px;
    }

    .payLoad {
        color: blue;
        line-height: 28px;
    }

    .signature {
        color: green;
        line-height: 28px;
    }

    .buttonActive {
        color: white;
        background-color: #2780e3;
    }

    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }
    #claimDetails {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    #claimDetails td, #claimDetails th {
        border: 1px solid #ddd;
        padding: 8px;
    }

    #claimDetails tr:nth-child(odd) {
        background-color: #f2f2f2;
    }

/*    #claimDetails tr:hover {
        background-color: #ddd;
    }*/

    #claimDetails th {
        padding-top: 12px;
        padding-bottom: 12px;
        text-align: left;
        font-weight:bold;
       /* background-color: #4CAF50;
        color: white;*/
    }
</style>
<div>
    <form method="post" asp-page="Index">
        <div class="form-group">
            <textarea asp-for="TokenEntered" class="form-control" name="TextArea1" id="TextArea1" rows="8" cols="145" runat="server" placeholder="Enter token"></textarea>
        </div>
        <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </form>
</div>
<div>
    @if (headerKey != null)
    {
        <div class="tab mt-4">
            <button class="tablinks" onclick="openTab(event, 'decodedToken')" id="defaultOpen">Decoded Token</button>
            <button class="tablinks" onclick="openTab(event, 'Claims')">Claims</button>
        </div>
        <div class="container tabcontent" style="border: 1px solid #e6e6e6" id="decodedToken">
            <h6>
                {<br />
                @for (int i = 0; i < headerKey.Count; i++)
                {
                    <span class="header ml-4">"@headerKey[i]" : "@headerValue[i]" </span><br />
                }
                }.{<br />
                @foreach (var claim in claims)
                {
                    <span class="payLoad ml-4">"@claim.Type" : "@claim.Value" </span><br />

                }
                }<span class="signature">.[Signature]</span>
            </h6>
        </div>
        <div class="container tabcontent" id="Claims">
            <table id="claimDetails">
                <tr>
                    <th>Claim Type</th>
                    <th>Value</th>
                    <th>Notes</th>
                </tr>
                @foreach (var claim in claims)
                {
                    @if (claim.Type == "aud")
                    {
                        <tr>
                            <td>aud</td>
                            <td>@claim.Value</td>
                            <td>Identifies the intended recipient of the token. In id_tokens, the audience is your app's Application ID, assigned to your app in the Azure portal. Your app should validate this value, and reject the token if the value does not match.</td>
                        </tr>
                    }
                    @if (claim.Type == "iss")
                    {
                        <tr>
                            <td>iss</td>
                            <td>@claim.Value</td>
                            <td>Identifies the security token service (STS) that constructs and returns the token, and the Azure AD tenant in which the user was authenticated. If the token was issued by the v2.0 endpoint, the URI will end in /v2.0. The GUID that indicates that the user is a consumer user from a Microsoft account is 9188040d-6c67-4c5b-b112-36a304b66dad. Your app should use the GUID portion of the claim to restrict the set of tenants that can sign in to the app, if applicable.</td>
                        </tr>
                    }
                    @if (claim.Type == "iat")
                    {
                        <tr>
                            <td>iat</td>
                            <td>@claim.Value</td>
                            <td>"Issued At" indicates when the authentication for this token occurred.</td>
                        </tr>
                    }
                    @if (claim.Type == "nbf")
                    {
                        <tr>
                            <td>nbf</td>
                            <td>@claim.Value</td>
                            <td>The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.</td>
                        </tr>
                    }
                    @if (claim.Type == "exp")
                    {
                        <tr>
                            <td>exp</td>
                            <td>@claim.Value</td>
                            <td>The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. It's important to note that a resource may reject the token before this time as well - if for example a change in authentication is required or a token revocation has been detected.</td>
                        </tr>
                    }
                    @if (claim.Type == "acct")
                    {
                        <tr>
                            <td>acct</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "acr")
                    {
                        <tr>
                            <td>acr</td>
                            <td>@claim.Value</td>
                            <td>The "Authentication context class" claim. A value of "0" indicates the end-user authentication did not meet the requirements of ISO/IEC 29115.</td>
                        </tr>
                    }
                    @if (claim.Type == "aio")
                    {
                        <tr>
                            <td>aio</td>
                            <td>@claim.Value</td>
                            <td>An internal claim used by Azure AD to record data for token reuse. Should be ignored.</td>
                        </tr>
                    }
                    @if (claim.Type == "amr")
                    {
                        <tr>
                            <td>amr</td>
                            <td>@claim.Value</td>
                            <td>Identifies how the subject of the token was authenticated. Microsoft identities can authenticate in a variety of ways, which may be relevant to your application. The amr claim is an array that can contain multiple items, such as ["mfa", "rsa", "pwd"], for an authentication that used both a password and the Authenticator app. See the amr claim section in Azure Active Directory access tokens documentation for values.</td>
                        </tr>
                    }
                    @if (claim.Type == "app_displayname")
                    {
                        <tr>
                            <td>app_displayname</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "appid")
                    {
                        <tr>
                            <td>appid</td>
                            <td>@claim.Value</td>
                            <td>The application ID of the client using the token. The application can act as itself or on behalf of a user. The application ID typically represents an application object, but it can also represent a service principal object in Azure AD.</td>
                        </tr>
                    }
                    @if (claim.Type == "appidacr")
                    {
                        <tr>
                            <td>appidacr</td>
                            <td>@claim.Value</td>
                            <td>Indicates how the client was authenticated. For a public client, the value is "0". If client ID and client secret are used, the value is "1". If a client certificate was used for authentication, the value is "2".</td>
                        </tr>
                    }
                    @if (claim.Type == "ipaddr")
                    {
                        <tr>
                            <td>ipaddr</td>
                            <td>@claim.Value</td>
                            <td>The IP address the user authenticated from.</td>
                        </tr>
                    }
                    @if (claim.Type == "name")
                    {
                        <tr>
                            <td>name</td>
                            <td>@claim.Value</td>
                            <td>The name claim provides a human-readable value that identifies the subject of the token. The value is not guaranteed to be unique, it is mutable, and it's designed to be used only for display purposes. The profile scope is required in order to receive this claim.</td>
                        </tr>
                    }
                    @if (claim.Type == "oid")
                    {
                        <tr>
                            <td>oid</td>
                            <td>@claim.Value</td>
                            <td>The immutable identifier for an object in the Microsoft identity system, in this case, a user account. This ID uniquely identifies the user across applications - two different applications signing in the same user will receive the same value in the oid claim. The Microsoft Graph will return this ID as the id property for a given user account. Because the oid allows multiple apps to correlate users, the profile scope is required in order to receive this claim. Note that if a single user exists in multiple tenants, the user will contain a different object ID in each tenant - they are considered different accounts, even though the user logs into each account with the same credentials.</td>
                        </tr>
                    }
                    @if (claim.Type == "platf")
                    {
                        <tr>
                            <td>platf</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "puid")
                    {
                        <tr>
                            <td>puid</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "scp")
                    {
                        <tr>
                            <td>scp</td>
                            <td>@claim.Value</td>
                            <td>The set of scopes exposed by your application for which the client application has requested (and received) consent. Your app should verify that these scopes are valid ones exposed by your app, and make authorization decisions based on the value of these scopes. Only included for user tokens.</td>
                        </tr>
                    }
                    @if (claim.Type == "sub")
                    {
                        <tr>
                            <td>sub</td>
                            <td>@claim.Value</td>
                            <td>The principal about which the token asserts information, such as the user of an app. This value is immutable and cannot be reassigned or reused. The subject is a pairwise identifier - it is unique to a particular application ID. Therefore, if a single user signs into two different apps using two different client IDs, those apps will receive two different values for the subject claim. This may or may not be desired depending on your architecture and privacy requirements.</td>
                        </tr>
                    }
                    @if (claim.Type == "tenant_region_scope")
                    {
                        <tr>
                            <td>tenant_region_scope</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "tid")
                    {
                        <tr>
                            <td>tid</td>
                            <td>@claim.Value</td>
                            <td>A GUID that represents the Azure AD tenant that the user is from. For work and school accounts, the GUID is the immutable tenant ID of the organization that the user belongs to. For personal accounts, the value is 9188040d-6c67-4c5b-b112-36a304b66dad. The profile scope is required in order to receive this claim.</td>
                        </tr>
                    }
                    @if (claim.Type == "unique_name")
                    {
                        <tr>
                            <td>unique_name</td>
                            <td>@claim.Value</td>
                            <td>Provides a human readable value that identifies the subject of the token. This value is not guaranteed to be unique within a tenant and should be used only for display purposes. Only issued in v1.0 id_tokens.</td>
                        </tr>
                    }
                    @if (claim.Type == "upn")
                    {
                        <tr>
                            <td>upn</td>
                            <td>@claim.Value</td>
                            <td>The username of the user. May be a phone number, email address, or unformatted string. Should only be used for display purposes and providing username hints in reauthentication scenarios.</td>
                        </tr>
                    }
                    @if (claim.Type == "uti")
                    {
                        <tr>
                            <td>uti</td>
                            <td>@claim.Value</td>
                            <td>An internal claim used by Azure to revalidate tokens. Should be ignored.</td>
                        </tr>
                    }
                    @if (claim.Type == "ver")
                    {
                        <tr>
                            <td>ver</td>
                            <td>@claim.Value</td>
                            <td>Indicates the version of the token.</td>
                        </tr>
                    }
                    @if (claim.Type == "wids")
                    {
                        <tr>
                            <td>wids</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "xms_st")
                    {
                        <tr>
                            <td>xms_st</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                    @if (claim.Type == "xms_tcdt")
                    {
                        <tr>
                            <td>xms_tcdt</td>
                            <td>@claim.Value</td>
                            <td></td>
                        </tr>
                    }
                }
            </table>
        </div>
    }
</div>

<script>
    function openTab(evt, cityName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }
    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen").click();
</script>